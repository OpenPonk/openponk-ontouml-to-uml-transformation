Class {
	#name : #TransformGeneralizationSetUI,
	#superclass : #SpPresenter,
	#instVars : [
		'diagram',
		'transformation',
		'labelGenSetText',
		'labelGenSetValue',
		'labelGeneralText',
		'labelGeneralValue',
		'labelSpecificText',
		'labelSpecificValue',
		'radioGen',
		'radioGenAndComp',
		'radioComp',
		'model',
		'useForAll'
	],
	#category : #'OntoUML-TransformationFramework-UI'
}

{ #category : #specs }
TransformGeneralizationSetUI class >> bottomLayout [
	^ SpBoxLayout newLeftToRight
		beNotHomogeneous;
		add: (SpBoxLayout newTopToBottom
			add: #radioComp expand: false;
			add: #radioGenAndComp expand: false;
			add: #radioGen expand: false;
			yourself) width: 220;
		add: #diagram expand: true;
		yourself.
]

{ #category : #'as yet unclassified' }
TransformGeneralizationSetUI class >> defaultLayout [
		^ SpBoxLayout newTopToBottom
		beNotHomogeneous;
		add: self topLayout height: 100;
		add: self bottomLayout expand: true;
		yourself
]

{ #category : #specs }
TransformGeneralizationSetUI class >> open [
	<script>
	self new openModal
]

{ #category : #specs }
TransformGeneralizationSetUI class >> title [
	^ 'Select transformation method for generalization set.'.
]

{ #category : #specs }
TransformGeneralizationSetUI class >> topLayout [
		^ SpGridLayout new
		beColumnNotHomogeneous;
		add: #labelGenSetText at: 1 @ 1;
		add: #labelGenSetValue at: 2 @ 1;
		add: #labelGeneralText at: 1 @ 2;
		add: #labelGeneralValue at: 2 @ 2;
		add: #labelSpecificText at: 1 @ 3;
		add: #labelSpecificValue at: 2 @ 3;
		yourself
]

{ #category : #initialization }
TransformGeneralizationSetUI >> connectPresenters [
	radioGen whenActivatedDo: [ self selectGeneralization. ].
	radioGenAndComp whenActivatedDo: [ self selectGenAndComp. ].
	radioComp whenActivatedDo: [ self selectComposition. ].
]

{ #category : #accessing }
TransformGeneralizationSetUI >> diagram [

	^ diagram
]

{ #category : #accessing }
TransformGeneralizationSetUI >> diagram: anObject [

	diagram := anObject
]

{ #category : #accessing }
TransformGeneralizationSetUI >> getGenSetName [
	^ model first generalizationSets first name ifNil: [ 'nameless'. ].
]

{ #category : #accessing }
TransformGeneralizationSetUI >> getGeneralName [
	^ model first general name.
]

{ #category : #accessing }
TransformGeneralizationSetUI >> getSpecificNames [
	| names |
	names := ''.
	model do: [ :generalization | names := names , generalization specific name , ', '.
		names byteSize >= self maxLength ifTrue: [ ^ names withoutSuffix: ', '. ].  ].
	^ names withoutSuffix: ', '.
	
]

{ #category : #images }
TransformGeneralizationSetUI >> imageComposition [
	^ (PNGReadWriter on:  self imageCompositionContent base64Decoded readStream) nextImage.
]

{ #category : #images }
TransformGeneralizationSetUI >> imageCompositionContent [
^ ''
]

{ #category : #images }
TransformGeneralizationSetUI >> imageGeneralization [
	^ (PNGReadWriter on:  self imageGeneralizationContent base64Decoded readStream) nextImage.
]

{ #category : #images }
TransformGeneralizationSetUI >> imageGeneralizationAndComposition [
	^ (PNGReadWriter on:  self imageGeneralizationAndCompositionContent base64Decoded readStream) nextImage.
]

{ #category : #images }
TransformGeneralizationSetUI >> imageGeneralizationAndCompositionContent [
^ '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'
]

{ #category : #images }
TransformGeneralizationSetUI >> imageGeneralizationContent [
^ ''
]

{ #category : #initialization }
TransformGeneralizationSetUI >> initializeDialogWindow: aDialog [
	aDialog
		closeOnBackdropClick: false;
		addButton: 'Confirm'
			do: [ :presenter |
				useForAll := false. 
				presenter close. ];
		addButton: 'Confirm for all'
			do: [ :presenter |
				useForAll := true. 
				presenter close. ].
]

{ #category : #initialization }
TransformGeneralizationSetUI >> initializeImage [
	diagram := self newImage.
	diagram image: self imageComposition.
	
]

{ #category : #initialization }
TransformGeneralizationSetUI >> initializeLabels [ 
	labelGenSetText := self newLabel.
	labelGenSetValue := self newLabel.
	labelGeneralText := self newLabel.
	labelGeneralValue := self newLabel.
	labelSpecificText := self newLabel.
	labelSpecificValue := self newLabel.
		
	labelGenSetText label: 'Transfomed generalization set: '.
	labelGenSetValue label: self getGenSetName.
	labelGeneralText label: 'Affected general: '.
	labelGeneralValue label: self getGeneralName.
	labelSpecificText label: 'Affected specifics: '.
	labelSpecificValue label: self getSpecificNames.
	
]

{ #category : #initialization }
TransformGeneralizationSetUI >> initializePresenters [
	self initializeLabels.
	self initializeRadioButtons.
	self initializeImage.
	transformation := 'Comp'.
]

{ #category : #initialization }
TransformGeneralizationSetUI >> initializeRadioButtons [
	radioComp := self newRadioButton.
	radioGenAndComp := self newRadioButton.
	radioGen := self newRadioButton.
	radioComp associatedRadioButtons: { radioGenAndComp. radioGen. }.

	radioComp label: 'Composition'.
	radioGenAndComp label: 'Generalization and composition'.
	radioGen label: 'Generalization'.
]

{ #category : #initialization }
TransformGeneralizationSetUI >> initializeWindow: aWindow [

	aWindow
		title: self class title;
		isResizeable: false;
		initialExtent: 700 @ 600.
]

{ #category : #initialization }
TransformGeneralizationSetUI >> maxLength [
	^ 100.
]

{ #category : #accessing }
TransformGeneralizationSetUI >> model [

	^ model
]

{ #category : #accessing }
TransformGeneralizationSetUI >> model: anObject [

	model := anObject
]

{ #category : #accessing }
TransformGeneralizationSetUI >> radioComp [

	^ radioComp
]

{ #category : #accessing }
TransformGeneralizationSetUI >> radioComp: anObject [

	radioComp := anObject
]

{ #category : #accessing }
TransformGeneralizationSetUI >> radioGen [

	^ radioGen
]

{ #category : #accessing }
TransformGeneralizationSetUI >> radioGen: anObject [

	radioGen := anObject
]

{ #category : #accessing }
TransformGeneralizationSetUI >> radioGenAndComp [

	^ radioGenAndComp
]

{ #category : #accessing }
TransformGeneralizationSetUI >> radioGenAndComp: anObject [

	radioGenAndComp := anObject
]

{ #category : #accessing }
TransformGeneralizationSetUI >> selectComposition [
	transformation := 'Comp'.
	diagram image: self imageComposition.
]

{ #category : #accessing }
TransformGeneralizationSetUI >> selectGenAndComp [
	transformation := 'GenAndComp'.	
	diagram image: self imageGeneralizationAndComposition.
]

{ #category : #accessing }
TransformGeneralizationSetUI >> selectGeneralization [
	transformation := 'Gen'.
	diagram image: self imageGeneralization.
]

{ #category : #accessing }
TransformGeneralizationSetUI >> transformation [

	^ transformation
]

{ #category : #accessing }
TransformGeneralizationSetUI >> transformation: anObject [

	transformation := anObject
]

{ #category : #accessing }
TransformGeneralizationSetUI >> useForAll [

	^ useForAll
]

{ #category : #accessing }
TransformGeneralizationSetUI >> useForAll: anObject [

	useForAll := anObject
]
